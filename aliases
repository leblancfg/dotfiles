# Unix
## Pytest-watch
function watch_tests() {
	CATCH_WARNINGS=" no:warnings"
	if [ "$(basename "$(git rev-parse --show-toplevel)")" = "siphon" ]
	then
		CATCH_WARNINGS=""
	fi
	export PYTHON_ENV="test"
	rm -f .testmondata && ptw --runner "pytest --testmon -s -p$CATCH_WARNINGS tests"
}
alias install-watch='pip install pytest-watch pytest-testmon'

## Jupyter Notebook
alias jn="cd && jupyter notebook &> /dev/null &"
alias jnk='ps -ax | grep "jupyter-notebook" | awk "{print \$1}" | xargs kill'

### Install `jupyter-vim-binding`
function install-jupyter-vim() {
    if [ command -v jupyter --version ]
        then
            # Create required directory in case (optional)
            mkdir -p $(jupyter --data-dir)/nbextensions
            # Clone the repository
            cd $(jupyter --data-dir)/nbextensions
            git clone https://github.com/lambdalisue/jupyter-vim-binding vim_binding
            # Activate the extension
            jupyter nbextension enable vim_binding/vim_binding
        else
        echo "Please make sure Jupyter is installed"
            exit 1
    fi
}

## Git
# Create a better gitignore
alias get_gitignore="curl https://www.toptal.com/developers/gitignore/api/jupyternotebooks,python,macos,windows,linux,zsh > .gitignore"

# Better checkout
function gch() { git checkout "$(git branch | fzf | tr -d '[:space:]')" }

# Amend commit
function gca() {git add . && git commit --amend --no-edit}

# Add & commit
function gitc () { git add --all && git commit -m "$@" ; }

# Push to master
function gitp () { git push origin $(git branch --show-current) $@; }

# Git squash last n commits
function gits () {
    NUM_COMMITS="$1"
    COMMIT_MSG="${@:2}"
    git reset --soft HEAD~$NUM_COMMITS && git commit -m $COMMIT_MSG;
    }

# git recursively pull all subdirectories
alias gitr="find . -name ".git" -type d | sed 's/\/.git//' |  xargs -P10 -I{} git -C {} pull"
# Re-apply gitignore
alias giti="git rm -r --cached . && git add . && git commit -m 're-applied .gitignore'"

# I must type this 100 times a day; shorten it
alias gs="git status"
alias gl="git log"
alias gp="git pull"

## Run black on files in git staging
function blacken () {
    git status --porcelain | cut -d ' ' -f3 | xargs black
}

## Pandoc - generate Bootstrap HTML
function panstrap () {
	DIR="$HOME/Templates"
	if [ "$#" -eq 2 ]
        then
            pandoc "$1" -o "$2" --template $DIR/template.html --css $DIR/template.css --self-contained --toc --toc-depth 3 --quiet
	elif [ "$#" -eq 1 ]
        then
            filename=$(basename -- "$1")
            filename="${filename%.*}"
            OUTPUT_FILENAME="$filename.html"
            pandoc "$1" -o "$OUTPUT_FILENAME" --template $DIR/template.html --css $DIR/template.css --self-contained --toc --toc-depth 3
        else
	    echo "Illegal number of parameters: need at least input filename and optional output filename"
            exit 1
	fi
}

## Moving around
alias si="cd ~/src/github.com/ShopifyPeopleAnalytics/siphon"
alias ia="cd ~/src/github.com/ShopifyPeopleAnalytics/impulse-api"
alias analysis="cd ~/src/github.com/ShopifyPeopleAnalytics/analysis"
pg_pw() {
    cat $HOME/src/github.com/ShopifyPeopleAnalytics/siphon/config/sources.production.json | jq -r '.read_database' | cut -f3-3 -d":" | cut -f1 -d"@" | tr -d '[:space:]' | pbcopy
}
db () {
    pg_pw
    gcloud beta sql connect people-analytics --user=postgres --database=hr
}
alias bullet='pbpaste | sed "s/^.\{6\}//g" | pbcopy'

## Dotfiles
# Update dotfiles
dfpush() {
    (
    cd ~/dotfiles
	git add .
	git commit -m 'autoupdate'
	git push origin master
    )
}
dfpull() {
    (
    cd ~/dotfiles
	git pull --ff-only
	./install  2>&1 >/dev/null
    )
}

## Etc
# Install dependencies
alias install-pip="pip install --user wheel pandas clipboard tabulate"

# More user stuff
alias shrug="echo '¯\\_(ツ)_/¯' | pbcopy"
notify() {
    INCANTATION="$@"
    COMMAND=$( echo "$INCANTATION" | cut -d " " -f1 )

    "$INCANTATION" && terminal-notifier -title "$COMMAND" -message "Task complete" -contentImage "https://cdn4.iconfinder.com/data/icons/logos-brands-5/24/shopify-128.png"
}
alias clip='python $HOME/dotfiles/scripts/clipboard_md.py'

syn() {
    WORD="$1"
    python $HOME/dotfiles/scripts/dict.py syn "$WORD"
}
def() {
    WORD="$1"
    python $HOME/dotfiles/scripts/dict.py def "$WORD"
}
ant() {
    WORD="$1"
    python $HOME/dotfiles/scripts/dict.py ant "$WORD"
}

# Poetry Python package management
export PATH="$HOME/.poetry/bin:$PATH"

