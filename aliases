# Just little things
alias so=source
# Python
export PIP_REQUIRE_VIRTUALENV=true
## Pytest-watch
function watch_tests() {
	CATCH_WARNINGS="-p no:warnings"
    REPO="$(basename "$(git rev-parse --show-toplevel)")"
	if [[ $REPO =~ ^(siphon|surfvey)$ ]];
        then
            CATCH_WARNINGS=""
    fi
	PYTHON_ENV=test rm -f .testmond\* && ptw --runner "pytest --testmon -s $CATCH_WARNINGS tests"
}
alias install-watch='pip install pytest-watch pytest-testmon'

## Jupyter Notebook
alias jn="cd && jupyter notebook &> /dev/null &"
alias jnk='ps -ax | grep "jupyter-notebook" | awk "{print \$1}" | xargs kill'

### Vim everywhere
# But actually, neovim
alias vi=nvim
alias vim=nvim
function reload-all-vim() {
    tmux list-panes -aF "#{pane_id} #{pane_current_command}" |
    awk '/vim|nvim/ {print $1}' |
    xargs -I {} tmux send-keys -t {} "C-[" ":so ~/.vimrc" "C-m"
}
function install-jupyter-vim() {
    if [ command -v jupyter --version ]
        then
            # Create required directory in case (optional)
            mkdir -p $(jupyter --data-dir)/nbextensions
            # Clone the repository
            cd $(jupyter --data-dir)/nbextensions
            git clone https://github.com/lambdalisue/jupyter-vim-binding vim_binding
            # Activate the extension
            jupyter nbextension enable vim_binding/vim_binding
        else
        echo "Please make sure Jupyter is installed"
            exit 1
    fi
}
function delswp() { find . -type f -name "*.sw[klmnop]" -delete }

## Git
# Create a better gitignore
alias get_gitignore="curl https://www.toptal.com/developers/gitignore/api/jupyternotebooks,python,macos,windows,linux,zsh > .gitignore"

# Better checkout
function gch() { git for-each-ref --format='%(refname:short)' refs/heads | fzf | xargs git checkout }

# Amend commit
function gca() {git add . && git commit --amend --no-edit}

# Add & commit
function gitc () { git add --all && if [ $# -eq 0 ]; then git commit; else git commit -m "$@"; fi }

# Push to master
function gitp () { git push origin $(git branch --show-current) $@; }

# Back to master and pull
function gmp () {
    MAIN_BRANCH=$(git symbolic-ref refs/remotes/origin/HEAD | xargs basename)
    git checkout $MAIN_BRANCH && git fetch && git pull origin $MAIN_BRANCH;
    }

# Git squash last n commits
function gits () {
    NUM_COMMITS="$1"
    COMMIT_MSG="${@:2}"
    git reset --soft HEAD~$NUM_COMMITS && git commit -m $COMMIT_MSG;
    }

# git recursively pull all subdirectories
alias gitr="find . -name '.git' -type d | sed 's/\/.git//' |  xargs -P10 -I{} git -C {} pull"
# Re-apply gitignore
alias giti="git rm -r --cached . && git add . && git commit -m 're-applied .gitignore'"

# I must type this 100 times a day; shorten it
alias gs="git status"
alias gl="git log"
alias gp="git pull"
alias grc="git rebase --continue"
alias garp="git add . && grc"
alias gcan="git commit --amend --no-edit"

# Github cli
alias ghpr="gh pr create"
alias ghm="gh pr checks --watch && gh pr merge --rebase"
# Tag for review
alias ghtfr="gh pr edit --add-reviewer meganbarlow,MCDAngelo,mhynes-shopify,Senjai,sprine"
alias ghtfros="gh pr edit --add-reviewer stevenwu4,meganbarlow,nikodraca,MCDAngelo,ali-hdr2,Senjai"
alias ghvw="gh pr view --web"

# Common workflows
alias gpm="gitp && ghpr -f && sleep 10 && ghm"

## Run black on files in git staging
function blacken () {
    git status --porcelain | cut -d ' ' -f3 | xargs black
}

## Pandoc - generate Bootstrap HTML
function panstrap () {
	DIR="$HOME/Templates"
    # If there's a second argument, use that as the output filename
	if [ "$#" -eq 2 ]
        then
            pandoc "$1" -o "$2" --template $DIR/template.html --css $DIR/template.css --self-contained --toc --toc-depth 3 --quiet
	elif [ "$#" -eq 1 ]
        then
            filename=$(basename -- "$1")
            filename="${filename%.*}"
            OUTPUT_FILENAME="$filename.html"
            pandoc "$1" -o "$OUTPUT_FILENAME" --template $DIR/template.html --css $DIR/template.css --self-contained --toc --toc-depth 3
        else
	    echo "Illegal number of parameters: need at least input filename and optional output filename"
            exit 1
	fi
}

## Moving around
alias t1="tree --dirsfirst -ChFL 1"
alias si="dev cd siphon"
alias to="dev cd totally-radford"
alias ia="dev cd impulse-api"
alias os="dev cd os"
alias analysis="dev cd analysis"
alias fw="dev cd os; cd tools/frameworks"
alias tw="dev cd os; cd tools/web"
alias pp="dev cd party-parrots"
function pg_pw() {
    cat $HOME/src/github.com/ShopifyPeopleAnalytics/siphon/config/sources.development.json | jq -r '.read_database' | cut -f3-3 -d":" | cut -f1 -d"@" | tr -d '[:space:]' | pbcopy
}
function db () {
    pg_pw
    gcloud sql connect people-analytics --user=postgres --database=hr
}
alias wds="gcloud scheduler jobs run worker_daily_snapshot"
alias bullet='pbpaste | sed "s/^.\{6\}//g" | pbcopy'

## Dotfiles
# Update dotfiles
function dfpush() {
    (
    cd ~/dotfiles
	git add .
	git commit -m 'autoupdate'
	git push origin master
    )
}
function dfpull() {
    (
    cd ~/dotfiles
	git pull --ff-only
	./install  2>&1 >/dev/null
    )
}

# Spin
alias spinrmrf="spin destroy --all --quiet -y"
alias spinreset="spin destroy --all -y && spin up os --no-snapshots --config os.branch=spin && spin ssh"

## Etc
alias cl="clear"
alias ding="afplay /System/Library/Sounds/Funk.aiff"

# Install dependencies
alias install-pip="pip install --user wheel pandas clipboard tabulate"

# More user stuff
export PATH="$HOME/.poetry/bin:$PATH"
eval "$(pyenv init -)"
export EDITOR="nvim"
alias shrug="echo '¬Ø\\_(„ÉÑ)_/¬Ø' | pbcopy"

function notify() {
    INCANTATION="$@"
    COMMAND=$( echo "$INCANTATION" | cut -d " " -f1 )

    "$INCANTATION" && terminal-notifier -title "$COMMAND" -message "Task complete" -contentImage "https://cdn4.iconfinder.com/data/icons/logos-brands-5/24/shopify-128.png"
}
alias clip='python $HOME/dotfiles/scripts/clipboard_md.py'

function syn() {
    WORD="$1"
    python $HOME/dotfiles/scripts/dict.py syn "$WORD"
}
function def() {
    WORD="$1"
    python $HOME/dotfiles/scripts/dict.py def "$WORD"
}
function ant() {
    WORD="$1"
    python $HOME/dotfiles/scripts/dict.py ant "$WORD"
}

function tomato() {
    termdown 25m -T "üçÖ" --no-figlet && say "ding"
}
